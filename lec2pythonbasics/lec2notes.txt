################################################################################
* Note: some of this information is simplified for presentation and glosses over
the details (particularly the discussion of scoping of variables) remember that
this was written for an introductory programming course.  If you want to know
the technicalities of Python parsing, then don't use this as your reference!

This Lecture is designed to be delivered while showing the code examples in
lecture.py in this directory.
################################################################################

We can run Python interactively.

We can treat it like a calculator.  (note diff between 3*2 and 3.0*2)

What happens:
	a. python parses the line into tokens, commonly a set of operations:
		left operand, operator, right operand
	b. The behavior of the operation depends on the type of the data.


Deep inside, all memory is an big array of switchs that can be 0 or 1. We
tend to think of these in convenient groups of 8 (bytes), but when we use python
or other high level languages we don't tend to think of the exact memory layout
much.  We can get away with this because python always knows the type of each
variable.  (type examples)

	Addition for two integers, is a different set of instructions on the CPU
than addition of two real (floating point numbers). In lower level languages we
have to be very explicit and tell the compiler whether we are adding integers or
floats.  This is tedious to write and mean that our code is less generic.

Python is strongly typed because every object in python's memory is tied to some
indication of what type it is.  We can ask python (but rarely need to).  More
importantly, it can figure out what the operations are legal base on the types
of the operands.

# strings

With strings, there are not set rules on mathematical operations. Python decided
to implement (multiplication of string and int, which is pretty
unambiguous). Addition of strings is allowed, but not subtraction.  Python tries
to implement an operation if it is obvious what it "should" do.  If the correct
behavior for an operation seems arbitrary, then python probably balks at it
(should "1" + 2 return a "3", 3, "12", or 12  -- it isn't clear, so you get an
error).


GOTCHA: 2/3 is 0 this is wart that is surprising to non-C programmers.
solution: create a float out of one of the operands.

Unusual: % is a modulo operator.  It returns the remainder.  This is mainly used
in an expression like
 X % Y
which will evaluate to 0 if X is a multiple of Y.




Thus far, it is barely more than a calculator...


#variables

Variables are a nice way of taking an object and giving it a name.

Python stores all variables in one of a few structures called a dictionary.  It
is just what you would expect: A data structure that allows you to take a name
and find out what it refers to.

In python lingo, we take an object and *bind* it to a name.  This means that the
object exists, and then we write down an association between the name and the
object.

Now we can use the variable name as shorthand for the object.

#####################################
radius = 2
radius = 1.5*4
circum = 2*radius*3.141592653589793
print circum
radius = 4
print circum

#####################################


Python reads
#####################################
radius = 2
#####################################
as:
	1. Parse into tokens:
		'radius'
		'='
		'2'
	2. Python recognizes the = to mean "name binding" (called assignment in
other languages).

	3. In a name binding operation, the right "operand" is evalauted. then the
	LAST step is to "bind" the object(s) on the right to the name(s) on the
left.

Remember: Name binding means "write the association of the name to the object
down in a dictionary" (more on dictionaries in a sec.)

In the statement "radius = 1.5*4" radius is not set equal to 1.5 and then
multiplied by 4.  Instead,:
	- the object 1.5 is created,
	- the object 4 is created
	- the operation "product" is executed, returning a new object with value 6.0
	- the name "radius" is associated with object 6.0



QUESTION: Now lets check out the code, is it clear why circum does not change
when radius changes?

---------------------

Trickier:
	another_variable = radius
	print radius
	print another_variable
	radius = 10
	print radius
	print another_variable
Python is always creating objects (based on our commands) Many of them are
ephemeral, and invisible to us.  Name binding is a way to store a reference to
an object, but when we reuse a variable name in another binding operation we are
reassigning the name -- we are NOT affecting the original object in any way.

---------------------

>Lost Objects
We don't normally use the 'locals' function that often when we program, but it
is useful if we want to see what names python knows about. The curly braces are
how python denotes dictionaries (more on these later)

Note that if we don't bind the object that is created as the result of an
operation, then it "slips through the fingers" and is lost

In the course of executing a statement, if python sees something that is a
variable name (not a number, keyword, or string literal).  It checks locals and
globals dictionaries to see if it should know this name.  If not a NameError
occcurs.


#dynamictyping
We tend to think of our names as being synonymous with our variables, but it is
important to realize that they are actually just lightweight handles to the
objects.  The objects are where all of the action is:
radius is an int.
if we say radius = 'blah' then type(radius) says str for string.  The
information about what type an object is represents is stored within the object.
You can rebind the name to an object of a different type.

This confuses C programmers.  In python names are sort of like C pointers, but
in C a pointer to an integer is different from a pointer to a float -- these
pointers always have the type.  In python the names are ways to look up the
variables, and the variables "know" what type they are.
In C the labels know what type the data is.
In Python the labels are ignorant, arbitrary shorthand for the objects.

#functions.
Thus far we have basically just done simple operations and assigned names --
nothing more sophisticated than a spreadsheet (albeit with different syntax).

An important advance is to be able to store functions -- a series of operations
that we can reuse.  This is basically like the macro functionality of Excel:


#####################################
def calc_circumference(radius):
    circumference =  2*radius*3.141592653589793
    return circumference
#####################################

This is a simple function definition.  I think that we can all see that it
calculates a circle's radius using the formula 2*pi*r

Let's unpack what python does when it reads this.  It is simple but the details
help us see how the language works.  Python sees this as:
	1. "def" means that we are going to create an function,
	2. (radius) means that the object will take one object as an argument,
	3. create a function blob. Insert the necessary instructions into it so that
when the function is "called" with an argument, we bind the name 'radius' to the
object that is passed in as the argument,
	4. ':' means here comes the rest of the function definition -- expect the
next line to be indented! (notice that the prompt changes from >>> to ...)
	5. "    circum =  2*radius*3.141592653589793" is a Python line. It is
indented, so it is part of the function that is being written.  This means that
the python interpretter does a simple parse of it but does NOT execute the
instructions yet -- we are just defining the function we are not calling it. (in
this case python would detect that the line will create the variable
"circumference" within the scope of the function).
	6. "    return circumference" is another Python line.  When we execute the
function and come to this line the python interpreter will understand that we
should stop executing the function and return to the calling context.  The
object that 'circumference' refers to should be treated as the resulting object
of the function call.
	7. "" a line without indentation means that the function is finished.
	8. Now python takes the function blob that was just created and binds it to
the name "calc_circumference"

Notice that nothing obvious happened when we finished.

We can see that we have a new object -- the name calc_circumference now refers
to something that is of type 'function'

The function's internal variable 'circumference' is not known for two reasons:
	1. we have not executed the function yet -- we have just defined it
	2. circumference is a variable in the scope of the function.

The indented code block is on hold until we invoke it, referred to as "calling
the function"

#####################################
calc_circumference(2)
#####################################
is a python expression the evalutation by python is:
	1. get the object the name 'calc_circumference' refers to
	2. note that the parentheses, we are going to "call" this object
	3. figure out what object should be passed in as the arguments
	4. Jump to execution of the function blob referred to by
'calc_circumference', pass in the objects that you identified in the previous
steps as the arguments.
	5. continue executing the function instructions until its end of the
function, and treat the returned object as the result

Note that the returned object is just a normal float (there is no connection any
more to the function). The fact that it was created in a function makes no
difference, also note that the name that it had in the function 'circumference'
is no longer attached to it.  That name had a scope of the function only.

This is _REALLY_ nice it means that we can write a set of operations down and
execute them later.  We don't have to worry about name clashes because python
"scopes" the names to as local a domain as possible.

Just to be pedantic we can modify the function so that it prints out it's local
"namespace" when it executes

A well-written function uses its own scope (which includes its argument, and it
is independent of the code that calls it).


#####################################
#multiargs
If we use multiple arguments they are separated by commas.  This time we'll
start the function with a string. this is the docstring.  If we use the help
function we'll see the doc string ('q' to exit help)


#####################################

We still are at the level of simple macros -- to have a real language, we have
to have logical operations -- flow control

checker is a simple function, notice that it uses logical statements
"if" means:
	1. check the following condition.  If it is True, then execute the following
	 block of code.  If it is False then execute the code in the "else" block
	2. ":" means here comes a block of code -- expect it to be indented.
	3. when the indentation level returns to the previous level, we have
finished the block of code that is conditionally executed.


elif statements can be inserted you have more than two possible "branches" of
code.

################################################################################
# lists
One thing computers are great at are repeating operations. this brings us to the
subject of collections and loops.

in addition to string, float, and ints, python has some more fundamental types:
	- Boolean type True or False.  We can call the bool function to create a
variable as a boolean from most types (0 is False, other numbers are True; the
empty string is False, all other strings are True)
	- None - a special object (of type NoneType that represents the concept of
	undefined.
	- lists
A list is just another object, in python. but it can hold references to many
other objects. Lists are denoted as [] with commas between values.
We can see the length of a list, or add values to it.
range is a function that returns us a list of consecutive integers.
or we can add or multiply to grow lists.

list objects also have methods.  "methods" are like functions, but we invoke
them with an object.  Typically the method acts on the object (or accesses
information from the object).  It is basically an function where the most
important argument is convey using a special mechanism.  So instead of

#####################################
a = [3,2]
sort(a)
#####################################

we write:

#####################################
a = [3,2]
a.sort()
#####################################

This is an example of object-oriented programming (more on this next week).  The
gist of it is that list class, has its own behaviors.  These methods are
basically functions that are specific to the type (list, in this case). Imagine
that you were going to write a function called list.  It might be intimidating
to do this if your function had to work with every imaginable data type in
python, but you might be able to write an efficient sort function if you *knew*
that it was only going to be called on an instance of a list.  This is an
advantage of writing a method rather than a function (we'll gloss over the fact,
that it is actually pretty easy to write a simple function like 'sort' in a very
generic way such that it would work with many types of data).

We can reverse a 'list' and do other things.  How do we find out what we can do?
dir or help


lists are a great way to keep track of lots of objects without inventing lots of
names.
To get a reference to a object in a list we dereference or index the list with
[] note that this returns an element or group of elements.

This is used for replacing an element in a list or just get obtain a reference.

Note that when you access a list, you don't alter it.



tuples are like lists but they are denoted with () instead of [].  We won't
worry too much about them.  The main difference is that you cannot change the
elements of a tuple.  So this works:

a = [1,5,3]
a[0] = "hi"

but this does NOT:

a = (1,5,3)
a[0] = "hi"

If you are just accessing elements in a collection, then tuples and lists behave
identically. So all of this works:


a = [1,5,3]
b = (1,5,3)
print (a[0])
print (b[0])





###########
#iteration
Often we want to repeat an action many times.  The "for" loop is the normal way
to do this

for i in x:
	print i


Note that the indented block is just like an "if" block or a function body.  So
the action "print i" is going to happen for every iteration through the "for"
loop.  The intro to the for block unpacks to "walk through every element in x.
For each element inside x call it i and then execute the following block"

Actually for loops are more general thin just walking through lists.  Anything
that is "iterable" can go in a for loop.  We actually have already encountered
another iterable:

for abc in "hello, there":
	print abc

We can actually create a list from any iterable.

WART: to get a string from a list, we usually want the a string's join method.
but notice that

a while loop is like a combination of "if" and "for."  It defines a block of
code to repeatedly execute, but the stopping condition is a boolean evaluation
(that follows the same rules as the condition evaluation for "if" statements).

Sometimes a "break" statement is helpful, rather than putting the condition in
the while statement itself (this is usually helpful if there are multiple
possible ways to exit a loop and writing them all in a single condition would be
cumbersome.


###########################
Let's do something vaguely biological:  If you add a new leaf to a phylogenetic
tree with n leaves there are 2*n - 3 attachement points where we could add the
new leaf.  How does that number look for a range of values for n? (ok, so it's
pretty obvious that it looks like a straight line with slope 2 and intercept of
-3, but bear with us we are learning programming).


git checkout 1be33051771aadfd
git checkout 093c4ea51
git checkout 634c70fc03a17
git checkout 1036cabca962491a
git checkout 3a23b4414db
git checkout 1ed9aa367701



# being UNIX-y pays off, we can write cool bash commands like this (don't worry
about this if you don't want to learn bash well -- but do appreciate how the
same concepts (for loops, use of standard input, output...) are common to
multiple programming languages.

for (( i=3 ; i < 200 ; ++i)) ;
do
	echo -n "$i "
	python num_attachments.py $i | python product.py 1
done


###########################


We've mentioned that python looks up names in dictionaries (called locals and
globals), but dict is also an important datatype in python.

You can think of it as a generic extension of a list but instead of mapping
integers to objects it maps any (hashable) "key" to an object.  It is not quite
the same, though.  If you want to be able to refer to element 5 million in a
list, then you have to have a list with at least 5,000,001 elements.  dicts
actually create slots for objects as you index them.

{key : value, another_key : some_value}

iteritems lets us walk through the dict, but not in any defined order!

"in" returns True if a key is in a list and False otherwise.
Note that many keys can refer to the same object, but each key has only one
value.

If we need a key to refer to a collection of values we can always put a list
object into the dictionary.

We can actually do some useful things now.  We can create a reverse lookup for a
dictionary...


Notice that a side effect of:
	- each key in a dict maps to exactly one object
	- no key can be repeated in a dict
that if we ignore the values in a dict, then we have "set". Sets are useful, and
are actually a builtin python type
















